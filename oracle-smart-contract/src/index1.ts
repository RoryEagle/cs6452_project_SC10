import Web3 from "web3";
import { Contract, DeployOptions } from "web3-eth-contract";

(async () => {
    const web3Provider = new Web3.providers.WebsocketProvider("ws://localhost:7545");
    const web3 = new Web3(web3Provider);
    const axios = require("axios").default

    //console.log(web3);

    // account_pri_key is an account generated by Ganache
let account = web3.eth.accounts.wallet.add("0x" + "fa440039970b29ef15984f0c37aa86865f4e85fb1e773375c48780617c2b39df");

//console.log(account);

const fs = require("fs");
const solc = require("solc");
function findImports(importPath: string) {
    try {
        return {

            contents: fs.readFileSync(`smart_contracts/${importPath}`, "utf8")
        };
    } catch (e: any) {
        return {
            error: e.message
        };
    }
}
//---------------------------------------------------------
function compileSols(solNames: string[]): any {
    interface SolCollection { [key: string]: any };
    let sources: SolCollection = {};
    solNames.forEach((value: string, index: number, array: string[]) => {
        let sol_file = fs.readFileSync(`smart_contracts/${value}.sol`, "utf8");
        sources[value] = {
            content: sol_file
        };
    });
    let input = {
        language: "Solidity",
        sources: sources,
        settings: {
            outputSelection: {
                "*": {
                    "*": ["*"]
                }
            }
        }
    };
    let compiler_output = solc.compile(JSON.stringify(input), {
        import: findImports
    });
    let output = JSON.parse(compiler_output);
    return output;
}
//---------------------------------------------------------
    let compiled = compileSols(["Tree", "ownerRegistry", "CarbonCredit"]);

    //DEPLOY
    let contract_instance: Contract;
    let gasPrice: string;
    let contract = new web3.eth.Contract(compiled.contracts["ownerRegistry"]["ownerRegistry"].abi,
    undefined, {
        data: "0x" + compiled.contracts["ownerRegistry"]["ownerRegistry"].evm.bytecode.object
    });
    await web3.eth.getGasPrice().then((averageGasPrice) => {
        gasPrice = averageGasPrice;
    }).catch(console.error);
    // assume account balance is sufficient
    await contract.deploy({
        data: contract.options.data,
        arguments: []
    } as DeployOptions).send({
        from: account.address,
        gasPrice: gasPrice!,
        gas: Math.ceil(1.2 * await contract.deploy({
        data: contract.options.data,
        arguments: []
        } as DeployOptions).estimateGas({
            from: account.address
        })),
    }).then((instance) => {
        contract_instance = instance;
    }).catch(console.error);
    console.log(contract_instance!.options.address);

    //------------------------------------------------- LISTEN ------------------------------------------//
    // newTreeAdded(address,address,string)
    contract_instance!.events["newTreeAdded(address,address,string)"]()
    .on("connected", function (subscriptionId: any) {
        console.log("listening on event newTreeAdded");
    })
        .on("data", async function (event: any) {
        let city = event.returnValues.city;
        let owner = event.returnValues.owner;
        let newTree = event.returnValues.newTree;
        let location = event.returnValues.location;

        let temperature = await axios.post(`http://localhost:8080/addTree`, {owner: owner, address: newTree, location: location},
        {
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
        },)
            .then(async function (response: any) {
                console.log("add tree");
                console.log
                if (response?.res?.statusCode == 201) {
                    console.log("success");
                }
            })
            .catch(function (error: any) {
            console.log(error);
            });
    })
    .on("error", function (error: any, receipt: any) {
        console.log(error);
        console.log(receipt);
        console.log("error listening on event temperatureRequest");
    });
    // event newCreditAdded(address owner, address newCredit);

    contract_instance!.events["newCreditAdded(address,address)"]()
    .on("connected", function (subscriptionId: any) {
        console.log("listening on event newCreditAdded");
    })
        .on("data", async function (event: any) {
        let city = event.returnValues.city;
        let owner = event.returnValues.owner;
        let newCredit = event.returnValues.newCredit;

        let temperature = await axios.post(`http://localhost:8080/addCarbonCredit`, {owner: owner, address: newCredit},
        {
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
        },)
            .then(async function (response: any) {
                console.log("add carbon credit");
                console.log
                if (response?.res?.statusCode == 200) {
                    console.log("success");
                }
            })
            .catch(function (error: any) {
            console.log(error);
            });
    })
    .on("error", function (error: any, receipt: any) {
        console.log(error);
        console.log(receipt);
        console.log("error listening on event temperatureRequest");
    });


    // event treeBought(address tree);
    // event treeSold(address tree);
    contract_instance!.events["treeSold(address)"]()
    .on("connected", function (subscriptionId: any) {
        console.log("listening on event treeSold");
    })
        .on("data", async function (event: any) {
        let address = event.returnValues.tree;

        let temperature = await axios.post(`http://localhost:8080/sellTree`, {address: address},
        {
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
        },)
            .then(async function (response: any) {
                console.log("sell tree");
                console.log
                if (response?.res?.statusCode == 200) {
                    console.log("success");
                }
            })
            .catch(function (error: any) {
            console.log(error);
            });
    })
    .on("error", function (error: any, receipt: any) {
        console.log(error);
        console.log(receipt);
        console.log("error listening on event temperatureRequest");
    });
})();
